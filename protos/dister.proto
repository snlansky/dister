// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3";

package protos;

service Dister {
    rpc Send (Message) returns (Message) {
    }
}

// A list of messages to be transmitted together.
message MessageList {
    repeated Message messages = 1;
}

// The message passed between the validator and client, containing the
// header fields and content.
message Message {

    enum MessageType {
        DEFAULT = 0;
        REGISTER_REQUEST = 1;
        REGISTER_RESPONSE = 2;
        UNREGISTER_REQUEST = 3;
        UNREGISTER_RESPONSE = 4;
        TASK_PROCESS_REQUEST = 5;
        TASK_PROCESS_RESPONSE = 6;
        PING_REQUEST = 700;
        PING_RESPONSE = 701;
    }

    // content.
    MessageType message_type = 1;

    // The identifier used to correlate response messages to their related
    // request messages.  correlation_id should be set to a random string
    // for messages which are not responses to previously sent messages.  For
    // response messages, correlation_id should be set to the same string as
    // contained in the request message.
    string correlation_id = 2;

    bytes content = 3;
}

message RegisterRequest {
    string id = 1;
    int32 cup = 2;
    int32 mem = 3;
}

message TaskProcessRequest {
    string id = 1;
    int32 threads = 2;
    int32 count_limit = 3;
    int32 time_limit = 4;
    Task task = 5;
}

message Validator {
    enum ValidType {
        // less than
        LT = 0;
        // less than or equal to
        LE = 1;
        // equal to
        EQ = 2;
        // not equal to
        NE = 3;
        // greater than or equal to
        GE = 4;
        // greater than
        GT = 5;
        // in
        IN = 6;
    }
    string name = 1;
    ValidType vt = 2;
    string value = 3;
}

message Task {
    enum Method {
        GET = 0;
        POST = 1;
    }
    string url = 1;
    string path = 2;
    Method method = 3;
    bytes body = 4;
    string script = 5;
    repeated Validator vs = 6;
}

message TaskProcessResponse {
    enum PrepareType {
        SUCCESS = 0;
        FAILD = 1;
    }
    string id = 1;
    PrepareType pt = 2;
}
